{"version":3,"sources":["components/navbar.jsx","components/cellArray.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","className","style","zIndex","onClick","onGenNewArray","type","placeholder","onChange","onSizeChange","data-toggle","onDisplayAlgorithm","id","onAlgorithmSelect","onSort","onColorTest","CellArray","value","height","backgroundColor","this","getArrayContainerClasses","array","map","index","getCellStyles","getCellClasses","key","Component","App","state","size","algorithm","handleGenNewArray","alert","buildNewArray","handleSizeChange","event","setState","target","handleAlgorithmSelect","handleDisplayAlgorithm","updateDisplayedAlgorithm","handleSort","sortedArray","insertionSort","undefined","bubbleSort","quickSort","length","min","max","Math","ceil","floor","random","arr","i","getRandomNumber","text","charAt","toUpperCase","slice","document","getElementsByClassName","temp","current","swapped","low","high","pivotVal","j","pivot","partition","setTimeout","Fragment","testColorChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e832cf35.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst NavBar = (props) => {\r\n  return (\r\n    <nav\r\n      className=\"navbar navbar-expand-lg navbar-dark bg-dark\"\r\n      style={{ zIndex: 1035 }} //very hacky and probably a better way to do this but it's a quick fix to make sure navbar and dropdown dont get covered\r\n    >\r\n      <span className=\"navbar-brand mb-0 h1\">Sorting Algorithm Visualizer</span>\r\n      <button\r\n        className=\"btn btn-outline-info btn-sm nav-item mr-3\"\r\n        onClick={props.onGenNewArray}\r\n      >\r\n        Generate new array\r\n      </button>\r\n      <span className=\"nav-item text-white mr-2\">Size of array: </span>\r\n      <form className=\"form-inline mr-3\">\r\n        <input\r\n          className=\"form-control form-control-sm\"\r\n          type=\"text\"\r\n          placeholder=\"1-75\"\r\n          onChange={props.onSizeChange}\r\n        />\r\n      </form>\r\n      <div className=\"dropdown mr-3\">\r\n        <button\r\n          className=\"btn btn-secondary dropdown-toggle\"\r\n          type=\"button\"\r\n          data-toggle=\"dropdown\"\r\n        >\r\n          {props.onDisplayAlgorithm}\r\n        </button>\r\n        <div className=\"dropdown-menu\">\r\n          {/*TODO: Convert initializing these buttons into a map function, or stateless functional component; redundant code.*/}\r\n          <button\r\n            className=\"dropdown-item\"\r\n            type=\"button\"\r\n            id=\"insertion\"\r\n            onClick={props.onAlgorithmSelect}\r\n          >\r\n            Insertion Sort\r\n          </button>\r\n          <button\r\n            className=\"dropdown-item\"\r\n            type=\"button\"\r\n            id=\"bubble\"\r\n            onClick={props.onAlgorithmSelect}\r\n          >\r\n            Bubble Sort\r\n          </button>\r\n          <button\r\n            className=\"dropdown-item\"\r\n            type=\"button\"\r\n            id=\"quick\"\r\n            onClick={props.onAlgorithmSelect}\r\n          >\r\n            Quick Sort\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <button\r\n        className=\"btn btn-outline-success btn-lg nav-item\"\r\n        onClick={props.onSort}\r\n      >\r\n        Sort!\r\n      </button>\r\n      <button\r\n        className=\"btn btn-outline-primary btn-lg nav-item ml-2\"\r\n        onClick={props.onColorTest}\r\n      >\r\n        Color Test\r\n      </button>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nconst LIGHT_BLUE = \"lightblue\";\r\n\r\nclass CellArray extends Component {\r\n  /**\r\n   * Returns all the classes needed for\r\n   * each individual cell in the array.\r\n   *\r\n   * @returns classes - string of all classes\r\n   * @memberof CellArray\r\n   */\r\n  getCellClasses() {\r\n    let classes =\r\n      \"array-cell text-center border border-dark\\\r\n      text-white font-weight-bold flex-grow-1\";\r\n    return classes;\r\n  }\r\n\r\n  /**\r\n   * Returns all the classes\r\n   * needed for the array container.\r\n   *\r\n   * @returns classes - string of all classes\r\n   * @memberof CellArray\r\n   */\r\n  getArrayContainerClasses() {\r\n    let classes =\r\n      \"d-flex flex-row justify-content-center \\\r\n      align-items-end fixed-bottom mb-4 w-75 mx-auto\";\r\n    return classes;\r\n  }\r\n\r\n  /**\r\n   * Takes in a number for a cell's value, and\r\n   * sets an new appropriate value to the 'height'\r\n   * key. This key represents the CSS height property.\r\n   * This function will be called to set the height of\r\n   * each cell in the array.\r\n   *\r\n   * @param {number} value - given value of the cell\r\n   * @returns cellHeight- object containing the height\r\n   *          property for the cell\r\n   * @memberof CellArray\r\n   */\r\n  getCellStyles(value) {\r\n    let size = value * 6;\r\n    let cellHeight = {\r\n      height: size,\r\n      backgroundColor: LIGHT_BLUE,\r\n    };\r\n    return cellHeight;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.getArrayContainerClasses()}>\r\n        {this.props.array.map((value, index) => (\r\n          <div\r\n            style={this.getCellStyles(value)}\r\n            className={this.getCellClasses()}\r\n            key={index}\r\n          >\r\n            {value}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CellArray;\r\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport CellArray from \"./components/cellArray\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    array: [],\n    size: 20,\n    algorithm: \"\",\n  };\n\n  /**\n   * Helper function for buildNewArray() -\n   * Generates a random number between a given\n   * min and max. (inclusive min, exclusive max).\n   *\n   * @param {number} min\n   * @param {number} max\n   * @returns random number between min and max\n   * @memberof App\n   */\n  getRandomNumber(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  /**\n   * Builds an array of a given size using\n   * random numbers from getRandomNumber().\n   * Updates the array in the state to be equal\n   * to the newly created array.\n   *\n   * @param {number} size - given desired size of the array\n   * @memberof App\n   */\n  buildNewArray(size) {\n    let arr = [];\n    for (var i = 0; i < size; i++) {\n      arr[i] = this.getRandomNumber(4, 100);\n    }\n    this.setState({ array: arr });\n  }\n\n  /**\n   * Calls buildNewArray() with desired\n   * array size immediately after App\n   * component has been mounted.\n   *\n   * @memberof App\n   */\n  componentDidMount() {\n    this.buildNewArray(this.state.size);\n  }\n\n  /**\n   * Calls buildNewArray() method everytime the\n   * \"Generate new array\" button is clicked in the navbar.\n   *\n   * @memberof App\n   */\n  handleGenNewArray = () => {\n    let size = this.state.size;\n    if (size === \"\" || size > 75 || size < 1) {\n      alert(\"Please choose a size between 1 and 75.\");\n    } else if (size % 1 !== 0) {\n      alert(\"Please choose a whole number.\");\n    } else {\n      this.buildNewArray(this.state.size);\n    }\n  };\n\n  /**\n   * Handles the onChange event for the size\n   * textbox. Updates the state's size attribute\n   * to be equal to the user input.\n   *\n   * @param {event} event - onSizeChange event stemming from onChange in textbox\n   * @memberof App\n   */\n  handleSizeChange = (event) => {\n    this.setState({ size: event.target.value });\n  };\n\n  /**\n   * Sets the current state of which algorithm will be used\n   * based on user onClick selection from the dropdown button menu.\n   *\n   * @param {event} event - onAlgorithmSelect event stemming from onClick\n   * @memberof App\n   */\n  handleAlgorithmSelect = (event) => {\n    this.setState({ algorithm: event.target.id });\n  };\n\n  /**\n   * Helper function that takes the string stored in the\n   * algorithm attribute of the state, and modifies it to\n   * be presented properly on the dropdown menu.\n   *\n   * @param {string} text - the current value of the algorithm state\n   * @returns Updated version of the string to be displayed\n   * @memberof App\n   */\n  updateDisplayedAlgorithm(text) {\n    return text.charAt(0).toUpperCase() + text.slice(1) + \" Sort\";\n  }\n\n  /**\n   * Handles what text will be displayed on the face\n   * of the dropdown menu. Will display the name of\n   * the currently selected algorithm.\n   *\n   * @memberof App\n   */\n  handleDisplayAlgorithm = () => {\n    if (this.state.algorithm === \"\") {\n      return \"Algorithms\";\n    } else {\n      return this.updateDisplayedAlgorithm(this.state.algorithm);\n    }\n  };\n\n  /**\n   * Takes in an array and returns the array\n   * now sorted using the Insertion Sort algorithm.\n   *\n   * @param {array} arr\n   * @returns arr - sorted array\n   * @memberof App\n   */\n  insertionSort(arr) {\n    let animationArray = document.getElementsByClassName(\"array-cell\");\n    for (let i = 1; i < arr.length; i++) {\n      let temp = i - 1;\n      let current = arr[i];\n      /* -- Attempting to start animating\n      setTimeout(() => {\n        animationArray[temp].style.backgroundColor = \"red\";\n      }, temp * 1000);\n      */\n      while (arr[temp] > current) {\n        arr[temp + 1] = arr[temp];\n        temp = temp - 1;\n      }\n      arr[temp + 1] = current;\n    }\n    return arr;\n  }\n\n  /**\n   * Takes in an array and returns the array\n   * now sorted using the Bubble Sort algorithm.\n   *\n   * @param {array} arr\n   * @returns arr- sorted array\n   * @memberof App\n   */\n  bubbleSort(arr) {\n    let swapped;\n    do {\n      swapped = false;\n      for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > arr[i + 1]) {\n          let temp = arr[i];\n          arr[i] = arr[i + 1];\n          arr[i + 1] = temp;\n          swapped = true;\n        }\n      }\n    } while (swapped);\n    return arr;\n  }\n\n  /**\n   * Helper function for quickSort() -\n   * Sets the rightmost element to be the pivot, and\n   * will place all elements greater than the pivot to\n   * the right of the pivot; and all elements lesser than\n   * the pivot to the left of the pivot.\n   *\n   * @param {array} arr - array to be partioned\n   * @param {number} low - starting index\n   * @param {number} high - ending index\n   * @returns index of the pivot element\n   * @memberof App\n   */\n  partition(arr, low, high) {\n    let pivotVal = arr[high];\n    let i = low - 1;\n    for (let j = low; j < high; j++) {\n      if (arr[j] < pivotVal) {\n        i++;\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n    }\n    let temp = arr[i + 1];\n    arr[i + 1] = arr[high];\n    arr[high] = temp;\n    return i + 1;\n  }\n\n  /**\n   * Takes in an array, the starting and ending\n   * index of that array. And returns the array\n   * now sorted using the Quick Sort algorithm.\n   *\n   * @param {array} arr - array to be sorted\n   * @param {low} low - starting index\n   * @param {high} high - ending index\n   * @returns\n   * @memberof App\n   */\n  quickSort(arr, low, high) {\n    if (low < high) {\n      let pivot = this.partition(arr, low, high);\n      this.quickSort(arr, low, pivot - 1);\n      this.quickSort(arr, pivot + 1, high);\n    }\n    return arr;\n  }\n\n  /**\n   * Handles which sorting algorithm is executed when the sort\n   * button is clicked; based on the current \"algorithm\" state.\n   *\n   * @memberof App\n   */\n  handleSort = () => {\n    let sortedArray;\n    switch (this.state.algorithm) {\n      case \"insertion\":\n        sortedArray = this.insertionSort(this.state.array);\n        this.setState({ array: sortedArray });\n        sortedArray = undefined;\n        break;\n      case \"bubble\":\n        sortedArray = this.bubbleSort(this.state.array);\n        this.setState({ array: sortedArray });\n        sortedArray = undefined;\n        break;\n      case \"quick\":\n        sortedArray = this.quickSort(\n          this.state.array,\n          0,\n          this.state.array.length - 1\n        );\n        this.setState({ array: sortedArray });\n        sortedArray = undefined;\n        break;\n      default:\n        alert(\"Please select an algorithm to sort with.\");\n    }\n  };\n\n  testColorChange() {\n    let array = document.getElementsByClassName(\"array-cell\");\n    for (let i = 0; i <= array.length; i++) {\n      setTimeout(() => {\n        if (i < array.length) {\n          array[i].style.backgroundColor = \"magenta\";\n        }\n      }, i * 10);\n      setTimeout(() => {\n        if (i - 1 !== -1) {\n          array[i - 1].style.backgroundColor = \"lightblue\";\n        }\n      }, i * 10);\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          onGenNewArray={this.handleGenNewArray}\n          onSizeChange={this.handleSizeChange}\n          onAlgorithmSelect={this.handleAlgorithmSelect}\n          onDisplayAlgorithm={this.handleDisplayAlgorithm()}\n          onSort={this.handleSort}\n          onColorTest={this.testColorChange}\n        />\n        <main className=\"container\">\n          <CellArray array={this.state.array} />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/js/bootstrap.js\";\nimport $ from \"jquery\";\nimport Popper from \"popper.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}